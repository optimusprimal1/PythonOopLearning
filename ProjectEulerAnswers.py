# Problem 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

# Find the sum of all the multiples of 3 or 5 below 1000
# sum = 0
# for i in range(1,1000):
#     if i%3==0 or i%5==0:
#         sum= sum+i
# print ('sum of all the multiples of 3 or 5 below 1000 = ', sum)






# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# index = 1
# a=1
# b=1
# sum = 0
# #4000000   3999998000000
# while a < 4000000  :
#     # print('a = ', a )
#     temp = 0
#     if a%2==0:
#         sum = sum + a
#         # print ('sum = ',sum)
#     temp = a + b
#     a = b
#     b = temp
    # print('temp = ', a)


    # index = index + 1

# print('Sum of even fibonacci below 4000000 = ', sum)



# def calculateSum(n):
#     if (n <= 0):
#         return 0
#
#     fibo = [0] * (n + 1)
#     fibo[1] = 1
#
#     # Initialize result
#     sm = fibo[0] + fibo[1]
#
#     # Add remaining terms
#     for i in range(2, n + 1):
#         fibo[i] = fibo[i - 1] + fibo[i - 2]
#         sm = sm + fibo[i]
#
#     return sm
#
#
# # Driver program to test
# # above function
# n = 4
# print("Sum of Fibonacci numbers is : ",
#       calculateSum(n))



# def Fibonacci_Series(n):
#     # using if-else conditional statement
#     if n < 0:
#         print("Oops! Incorrect input")
#     # First Fibonacci number is 0
#     elif n == 0:
#         return (0)
#     # Second Fibonacci number is 1
#     elif n == 1:
#         return (1)
#     else:
#         return (Fibonacci_Series(n - 1) + Fibonacci_Series(n - 2))
# # printing the 12th element of the Fibonacci Series
# print("10th Element of the Fibonacci Series:", Fibonacci_Series(10))




# Checking prime number
# print('Prime numbers between 1 and 100 are:')
#
# for num in range(2, 101):
#     if num > 1:
#         for i in range(2, num):
#             if (num % i) == 0:
#                 break
#         else:
#             print(num)


# Problem 3
# The prime factors of 13195 are 5, 7, 13 and 29.
#
# What is the largest prime factor of the number 600851475143 ?

# min = 0
# max = 0
# for num in range(2,101/2):
#     if num>1:
#         for i in range(2,num):
#             if (i%2)==0:
#                 break
#             else:
#                 max = num
#                 print('num = ',num)
# print('Largest prime number of 600851475143 = ', max)


# Sum square difference
#
#
#   [Show HTML problem content]
# Problem 6
#
# The sum of the squares of the first ten natural numbers is,
#
# The square of the sum of the first ten natural numbers is,
#
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
#
# .
#
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

# square_sum = 0
# sum_of_square = 0
# final_value = 0
# for i in range(1,101):
#     print('i = ', i)
#     square_sum = i + square_sum
#     sum_of_square = (i*i) + sum_of_square
# print('Square sum = ',(square_sum * square_sum))
# print('Sum of square = ',sum_of_square)
# final_value = (square_sum * square_sum) - sum_of_square
# print('Difference between Square sum and Sum of square = ',final_value)




# Square sum =  24502500
# Sum of square =  328350
# Difference between Square sum and Sum of square =  24174150



# Power digit sum
# Problem 16
#
# 2 power 15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
#
# What is the sum of the digits of the number 2 power 1000?
# power_val = pow(2,1000)
# print('2 power 1000 = ', power_val)
#
# sum = 0
# for digit in str(power_val):
#     sum = int(digit) + sum
# print('Sum of the digits of the number 2 power 1000 = ', sum)



# Number letter counts
#
# Problem 17
#
# If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
#
# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
#
# NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.

def num_spelled(num:int)->int:
    d = {
        1:'one',
        2:'two',
        3:'three',
        4:'four',
        5:'five',
        6:'six',
        7:'seven',
        8:'eight',
        9:'nine',
        10:'ten',
        11:'eleven',
        12:'twelve',
        13:'thirteen',
        14:'fourteen',
        15:'fifteen',
        16:'sixteen',
        17:'seventeen',
        18:'eighteen',
        19:'nineteen',
        20:'twenty',
        30:'thirty',
        40:'fourty',
        50:'fifty',
        60:'sixty',
        70:'seventu',
        80:'eighty',
        90:'ninety',
        1000:'onethousand'
    }






# Factorial digit sum
#
# Problem 20
#
# n! means n × (n − 1) × ... × 3 × 2 × 1
#
# For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
# and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
#
# Find the sum of the digits in the number 100!
fact_digit_sum = 0
factorial_product = 1
for i in range(1,101):
    factorial_product = i * factorial_product
for digit in str(factorial_product):
    fact_digit_sum = fact_digit_sum + int(digit)
print('Factorial digit sum = ', fact_digit_sum)







